set(LCI_PM_BACKEND pmi1 CACHE STRING "Process management backend to use")
set_property(CACHE LCI_PM_BACKEND PROPERTY STRINGS pmi1 pmi2 mpi file)

if(LCI_PM_BACKEND STREQUAL "pmi1")
    set(LCI_USE_PMI1 ON)
elseif(LCI_PM_BACKEND STREQUAL "pmi2")
    set(LCI_USE_PMI2 ON)
elseif(LCI_PM_BACKEND STREQUAL "mpi")
    set(LCI_USE_MPI_AS_PM ON)
elseif(LCI_PM_BACKEND STREQUAL "file")
    set(LCI_USE_FILE_AS_PM ON)
    message("set LCI_USE_FILE_AS_PM ON")
else()
    message(FATAL_ERROR "Fabric ${LCI_PM_BACKEND} not supported")
endif()

add_library(pmi-obj OBJECT)
set_target_properties(pmi-obj PROPERTIES
        POSITION_INDEPENDENT_CODE ON
        )
target_sources(pmi-obj PRIVATE pmi_wrapper.c)
configure_file(pmi_wrapper.h.in pmi_wrapper.h @ONLY)
target_include_directories(pmi-obj PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
if(LCI_USE_PMI1)
    add_subdirectory(pmi1)
elseif(LCI_USE_PMI2)
    add_subdirectory(pmi2)
endif()

add_library(pmi_shared SHARED)
add_library(pmi_static STATIC)
target_link_libraries(pmi_shared PUBLIC pmi-obj)
target_link_libraries(pmi_static PUBLIC pmi-obj)
target_include_directories(pmi_shared PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
target_include_directories(pmi_static PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
